Panic Soft
#NoFreeOnExit TRUE


define ROOT     C:\Program Files (x86)\nxlog
define CERTDIR  %ROOT%\cert
define CONFDIR  %ROOT%\conf
define LOGDIR   %ROOT%\data
define LOGFILE  %LOGDIR%\nxlog.log
LogFile %LOGFILE%

Moduledir %ROOT%\modules
CacheDir  %ROOT%\data
Pidfile   %ROOT%\data\nxlog.pid
SpoolDir  %ROOT%\data

#Events to collect
define EventsToCollect     1, 2, 6, 15, 19, 20, 21, 23, 24, 25, 31, 34, 35, 41, \
                           43, 104, 219, 307, 400, 410, 441, 800, 865, 866, \
                           867, 868, 882, 903, 904, 905, 906, 907, 908, 1000, \
                           1001, 1002, 1005, 1006, 1008, 1009, 1010, 1022, \
                           1033, 1102, 1125, 1127, 1129, 2001, 2003, 2004, \
                           2005, 2006, 2009, 2033, 3001, 3002, 3003, 3004, \
                           3010, 3023, 4100, 4101, 4102, 4103, 4104, 4608, \
                           4609, 4610, 4611, 4612, 4614, 4615, 4616, 4618, \
                           4621, 4622, 4624, 4625, 4634, 4646, 4647, 4648, \
                           4649, 4650, 4651, 4652, 4653, 4654, 4655, 4656, \
                           4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664, \
                           4665, 4666, 4667, 4668, 4670, 4671, 4672, 4673, \
                           4674, 4675, 4688, 4689, 4690, 4691, 4692, 4693, \
                           4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, \
                           4702, 4704, 4705, 4706, 4707, 4709, 4710, 4711, \
                           4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, \
                           4720, 4722, 4723, 4724, 4725, 4726, 4727, 4728, \
                           4729, 4730, 4731, 4732, 4733, 4734, 4735, 4737, \
                           4738, 4739, 4740, 4741, 4742, 4743, 4744, 4745, \
                           4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, \
                           4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, \
                           4762, 4764, 4765, 4766, 4767, 4768, 4769, 4770, \
                           4771, 4772, 4773, 4774, 4775, 4776, 4777, 4778, \
                           4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, \
                           4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, \
                           4800, 4801, 4802, 4803, 4816, 4817, 4864, 4865, \
                           4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, \
                           4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, \
                           4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, \
                           4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, \
                           4898, 4899, 4900, 4902, 4904, 4905, 4906, 4907, \
                           4908, 4909, 4910, 4912, 4928, 4929, 4930, 4931, \
                           4932, 4933, 4934, 4935, 4936, 4937, 4944, 4945, \
                           4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953, \
                           4954, 4956, 4957, 4958, 4960, 4961, 4962, 4963, \
                           4964, 4965, 4976, 4977, 4978, 4979, 4980, 4981, \
                           4982, 4983, 4984, 4985, 5008, 5024, 5025, 5027, \
                           5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, \
                           5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, \
                           5045, 5046, 5047, 5048, 5049, 5050, 5051, 5056, \
                           5057, 5058, 5059, 5060, 5061, 5062, 5063, 5064, \
                           5065, 5066, 5067, 5068, 5069, 5070, 5120, 5121, \
                           5122, 5123, 5124, 5125, 5126, 5127, 5136, 5137, \
                           5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, \
                           5148, 5149, 5150, 5151, 5152, 5153, 5154, 5155, \
                           5156, 5157, 5158, 5159, 5168, 5376, 5377, 5378, \
                           5440, 5441, 5442, 5443, 5444, 5446, 5447, 5448, \
                           5449, 5450, 5451, 5452, 5453, 5456, 5457, 5458, \
                           5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466, \
                           5467, 5468, 5471, 5472, 5473, 5474, 5477, 5478, \
                           5479, 5480, 5483, 5484, 5485, 5632, 5633, 5712, \
                           5861, 5888, 5889, 5890, 6008, 6144, 6145, 6272, \
                           6273, 6274, 6275, 6276, 6277, 6278, 6279, 6280, \
                           6281, 6400, 6401, 6403, 6404, 6405, 6406, 6407, \
                           7022, 7023, 7024, 7026, 7031, 7032, 7034, 7040, \
                           7045, 8000, 8001, 8002, 8003, 8004, 8006, 8007, \
                           8011, 10000, 10001, 11000, 11001, 11002, 11004, \
                           11005, 11006, 11010, 12011, 12012, 12013, 24577, \
                           24578, 24579, 24580, 24581, 24582, 24583, 24584, \
                           24586, 24588, 24592, 24593, 24594, 24595, 24621
#Malware related events
define MalwereEvents       100, 104, 129, 140, 200, 201, 1116

<Extension syslog>
    Module          xm_syslog
</Extension>

<Input eventlog>
    Module          im_msvistalog
    <QueryXML>
        <QueryList>
            <Query Id='0'>
                <Select Path='Application'>*</Select>
                <Select Path='Security'>*</Select>
                <Select Path='Setup'>*</Select>
                <Select Path='System'>*</Select>
                <Select Path='Microsoft-Windows-Application-Experience/Program-Inventory'>*</Select>
                <Select Path='Microsoft-Windows-AppLocker/EXE and DLL'>*</Select>
                <Select Path='Microsoft-Windows-AppLocker/MSI and Script'>*</Select>
                <Select Path='Microsoft-Windows-CodeIntegrity/Operational'>*</Select>
                <Select Path='Microsoft-Windows-Kernel-PnP/Configuration'>*</Select>
                <Select Path='Microsoft-Windows-NetworkProfile/Operational'>*</Select>
                <Select Path='Microsoft-Windows-PrintService/Operational'>*</Select>
                <Select Path='Microsoft-Windows-PowerShell/Admin'>*</Select>
                <Select Path='Microsoft-Windows-PowerShell/Operational'>*</Select>
                <Select Path='Microsoft-Windows-TaskScheduler/Operational'>*</Select>
                <Select Path='Microsoft-Windows-TerminalServices-LocalSessionManager/Operational'>*</Select>
                <Select Path='Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational'>*</Select>
                <Select Path='Microsoft-Windows-Windows Defender/Operational'>*</Select>
                <Select Path='Microsoft-Windows-Windows Firewall With Advanced Security/Firewall'>*</Select>
                <Select Path='Microsoft-Windows-WindowsUpdateClient/Operational'>*</Select>
                <Select Path='Microsoft-Windows-WLAN-AutoConfig/Operational'>*</Select>
            </Query>
        </QueryList>
    </QueryXML>
    exec    if ($EventID NOT IN (%EventsToCollect%)) and \
                ($EventID NOT IN (%MalwereEvents%)) drop();
    exec $Message = 'EventID:[' + $EventID + '] ' + $Message ;
</Input>


#100 - 200 TaskScheduler
<Input eventlogSC>
    Module          im_msvistalog
    <QueryXML>
        <QueryList>
            <Query Id='0'>
                <Select Path='Microsoft-Windows-TaskScheduler/Operational'>*</Select>
            </Query>
        </QueryList>
    </QueryXML>
    exec    if ($EventID < 100) or \
                ($EventID > 200) drop();
    exec $Message = 'EventID:[' + $EventID + '] ' + $Message ;
</Input>

#200 - 500 PowerShell
<Input eventlogPWR>
    Module          im_msvistalog
    <QueryXML>
        <QueryList>
            <Query Id='0'>
                <Select Path='Microsoft-Windows-PowerShell/Admin'>*</Select>
                <Select Path='Microsoft-Windows-PowerShell/Operational'>*</Select>
            </Query>
        </QueryList>
    </QueryXML>
    exec    if ($EventID < 200) OR \
                ($EventID > 500) drop();
    exec $Message = 'EventID:[' + $EventID + '] ' + $Message ;
</Input>


<Output udp>
    Module          om_udp
    Host            192.168.56.105
    Port            514
    Exec            to_syslog_bsd();
</Output>

<Route eventlog_to_udp>
    Path            eventlog, eventlogSC, eventlogPWR => udp
</Route>

<Extension _charconv>
    Module      xm_charconv
    AutodetectCharsets iso8859-2, utf-8, utf-16, utf-32
</Extension>

<Extension _exec>
    Module      xm_exec
</Extension>

<Extension _fileop>
    Module      xm_fileop

    # Check the size of our log file hourly, rotate if larger than 5MB
    <Schedule>
        Every   1 hour
        Exec    if (file_exists('%LOGFILE%') and \
                   (file_size('%LOGFILE%') >= 5M)) \
                    file_cycle('%LOGFILE%', 8);
    </Schedule>

    # Rotate our log file every week on Sunday at midnight
    <Schedule>
        When    @weekly
        Exec    if file_exists('%LOGFILE%') file_cycle('%LOGFILE%', 8);
    </Schedule>
</Extension>
